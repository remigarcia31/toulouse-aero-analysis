steps:
  # # === Étape 1 : DEBUG ===
  # # Affiche le contenu du fichier cloudbuild.yaml tel qu'il est vu par le build
  # - name: 'ubuntu' # Une image simple avec la commande 'cat'
  #   id: 'DEBUG Show YAML Content'
  #   entrypoint: 'sh'
  #   args:
  #     - '-c'
  #     - |
  #       echo "--- Contenu de /workspace/cloudbuild.yaml ---"
  #       cat /workspace/cloudbuild.yaml || echo "ERREUR: Impossible d'afficher /workspace/cloudbuild.yaml"
  #       echo "--- Fin du contenu ---"
  #       # Vérifions aussi si JAVA_HOME existe déjà pour une raison inconnue au début
  #       echo "DEBUG: Variable JAVA_HOME au début du build: [$JAVA_HOME]"

  # --- Étape 2 : Validation Terraform ---
  - name: 'hashicorp/terraform:1.3.7'
    id: 'Terraform Validate'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Validating Terraform configuration..."
        # S'assurer que le répertoire terraform existe bien à la racine du workspace cloné
        if [ -d "terraform" ]; then
          cd terraform
          terraform init -backend-config=bucket=${_TF_STATE_BUCKET}
          terraform validate
          echo "Terraform validation successful."
        else
          echo "WARN: Terraform directory not found, skipping validation."
        fi

  # --- Étape 3 : Setup Python Env, Install Java & Dependencies ---
  - name: 'python:3.11'
    id: 'Setup Environment and Dependencies'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing Java (OpenJDK 11)..."
        apt-get update -qq && apt-get install -y openjdk-11-jdk --no-install-recommends
        export MY_BUILD_JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
        echo "MY_BUILD_JAVA_HOME variable set."
        echo "Creating virtual environment in /workspace/venv..."
        python -m venv /workspace/venv
        echo "Installing Python dependencies into venv..."
        /workspace/venv/bin/pip install --upgrade pip
        /workspace/venv/bin/pip install \
          -r src/cloud_function_ingest/requirements.txt \
          -r src/spark_job/requirements.txt \
          -r requirements.txt
        echo "Dependencies installed."
        # === AJOUT DE L'ÉCRITURE DU FICHIER ===
        echo "Exporting MY_BUILD_JAVA_HOME to /workspace/java_env.sh..."
        echo "export MY_BUILD_JAVA_HOME=$MY_BUILD_JAVA_HOME" > /workspace/java_env.sh
        echo "java_env.sh created."
        # ======================================


  # # --- Étape 4 : Linting du code Python (Cloud Function) ---
  # - name: 'python:3.11'
  #   id: 'Lint Cloud Function Code'
  #   entrypoint: '/workspace/venv/bin/flake8'
  #   args: [ '--ignore=E501', 'src/cloud_function_ingest/' ]

  # # --- Étape 5 : Tests Unitaires Python (Cloud Function) ---
  # - name: 'python:3.11'
  #   id: 'Run Cloud Function Unit Tests'
  #   entrypoint: '/workspace/venv/bin/pytest'
  #   args: ['src/cloud_function_ingest/tests/']

  # # === Étape 6 : Tests Unitaires PySpark ===
  # - name: 'python:3.11'
  #   id: 'Run Spark Unit Tests'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       # Sourcer le fichier pour obtenir MY_BUILD_JAVA_HOME
  #       source /workspace/java_env.sh || echo "java_env.sh not found."
  #       echo "MY_BUILD_JAVA_HOME value is: $MY_BUILD_JAVA_HOME" # On affiche la nouvelle variable
  #       # MAINTENANT, définir la VRAIE variable JAVA_HOME pour Pytest/Spark
  #       export JAVA_HOME="$MY_BUILD_JAVA_HOME"
  #       echo "Actual JAVA_HOME for PySpark set to: $JAVA_HOME"
  #       echo "Running PySpark tests..."
  #       # Utiliser le pytest du venv
  #       /workspace/venv/bin/pytest src/spark_job/tests/

  # # --- Étapes Futures (Déploiement...) ---

# Options globales pour le build
options:
  logging: CLOUD_LOGGING_ONLY

# Configuration du timeout global
# timeout: "1800s"